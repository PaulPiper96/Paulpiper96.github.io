{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://webpack/webpack/runtime/async module","webpack://webpack/./node_modules/workbox-cacheable-response/_version.js","webpack://webpack/./node_modules/workbox-core/_private/Deferred.js","webpack://webpack/./node_modules/workbox-core/_private/WorkboxError.js","webpack://webpack/./node_modules/workbox-core/models/messages/messageGenerator.js","webpack://webpack/./node_modules/workbox-core/_private/cacheMatchIgnoreParams.js","webpack://webpack/./node_modules/workbox-core/_private/cacheNames.js","webpack://webpack/./node_modules/workbox-core/_private/canConstructResponseFromBodyStream.js","webpack://webpack/./node_modules/workbox-core/_private/executeQuotaErrorCallbacks.js","webpack://webpack/./node_modules/workbox-core/_private/getFriendlyURL.js","webpack://webpack/./node_modules/workbox-core/_private/logger.js","webpack://webpack/./node_modules/workbox-core/_private/timeout.js","webpack://webpack/./node_modules/workbox-core/_private/waitUntil.js","webpack://webpack/./node_modules/workbox-core/_version.js","webpack://webpack/./node_modules/workbox-core/copyResponse.js","webpack://webpack/./node_modules/workbox-core/models/quotaErrorCallbacks.js","webpack://webpack/./node_modules/workbox-expiration/_version.js","webpack://webpack/./node_modules/workbox-precaching/_version.js","webpack://webpack/./node_modules/workbox-range-requests/_version.js","webpack://webpack/./node_modules/workbox-routing/RegExpRoute.js","webpack://webpack/./node_modules/workbox-routing/Route.js","webpack://webpack/./node_modules/workbox-routing/Router.js","webpack://webpack/./node_modules/workbox-routing/_version.js","webpack://webpack/./node_modules/workbox-routing/registerRoute.js","webpack://webpack/./node_modules/workbox-routing/utils/constants.js","webpack://webpack/./node_modules/workbox-routing/utils/getOrCreateDefaultRouter.js","webpack://webpack/./node_modules/workbox-routing/utils/normalizeHandler.js","webpack://webpack/./node_modules/workbox-strategies/Strategy.js","webpack://webpack/./node_modules/workbox-strategies/StrategyHandler.js","webpack://webpack/./node_modules/workbox-strategies/_version.js","webpack://webpack/./node_modules/workbox-window/build/workbox-window.prod.es5.mjs","webpack://webpack/./src/app.js","webpack://webpack/./src/index.js","webpack://webpack/./src/swlessoverhead.js","webpack://webpack/./node_modules/idb/build/wrap-idb-value.js","webpack://webpack/./node_modules/idb/build/index.js","webpack://webpack/./node_modules/workbox-precaching/utils/createCacheKey.js","webpack://webpack/./node_modules/workbox-precaching/utils/PrecacheInstallReportPlugin.js","webpack://webpack/./node_modules/workbox-precaching/utils/PrecacheCacheKeyPlugin.js","webpack://webpack/./node_modules/workbox-precaching/PrecacheStrategy.js","webpack://webpack/./node_modules/workbox-precaching/PrecacheController.js","webpack://webpack/./node_modules/workbox-precaching/utils/getOrCreatePrecacheController.js","webpack://webpack/./node_modules/workbox-precaching/PrecacheRoute.js","webpack://webpack/./node_modules/workbox-precaching/utils/generateURLVariations.js","webpack://webpack/./node_modules/workbox-precaching/utils/removeIgnoredSearchParams.js","webpack://webpack/./node_modules/workbox-precaching/precacheAndRoute.js","webpack://webpack/./node_modules/workbox-precaching/precache.js","webpack://webpack/./node_modules/workbox-precaching/addRoute.js","webpack://webpack/webpack/bootstrap","webpack://webpack/webpack/runtime/compat get default export","webpack://webpack/webpack/runtime/define property getters","webpack://webpack/webpack/runtime/hasOwnProperty shorthand","webpack://webpack/webpack/startup"],"sourcesContent":["var webpackQueues = typeof Symbol === \"function\" ? Symbol(\"webpack queues\") : \"__webpack_queues__\";\nvar webpackExports = typeof Symbol === \"function\" ? Symbol(\"webpack exports\") : \"__webpack_exports__\";\nvar webpackError = typeof Symbol === \"function\" ? Symbol(\"webpack error\") : \"__webpack_error__\";\nvar resolveQueue = (queue) => {\n\tif(queue && queue.d < 1) {\n\t\tqueue.d = 1;\n\t\tqueue.forEach((fn) => (fn.r--));\n\t\tqueue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));\n\t}\n}\nvar wrapDeps = (deps) => (deps.map((dep) => {\n\tif(dep !== null && typeof dep === \"object\") {\n\t\tif(dep[webpackQueues]) return dep;\n\t\tif(dep.then) {\n\t\t\tvar queue = [];\n\t\t\tqueue.d = 0;\n\t\t\tdep.then((r) => {\n\t\t\t\tobj[webpackExports] = r;\n\t\t\t\tresolveQueue(queue);\n\t\t\t}, (e) => {\n\t\t\t\tobj[webpackError] = e;\n\t\t\t\tresolveQueue(queue);\n\t\t\t});\n\t\t\tvar obj = {};\n\t\t\tobj[webpackQueues] = (fn) => (fn(queue));\n\t\t\treturn obj;\n\t\t}\n\t}\n\tvar ret = {};\n\tret[webpackQueues] = x => {};\n\tret[webpackExports] = dep;\n\treturn ret;\n}));\n__webpack_require__.a = (module, body, hasAwait) => {\n\tvar queue;\n\thasAwait && ((queue = []).d = -1);\n\tvar depQueues = new Set();\n\tvar exports = module.exports;\n\tvar currentDeps;\n\tvar outerResolve;\n\tvar reject;\n\tvar promise = new Promise((resolve, rej) => {\n\t\treject = rej;\n\t\touterResolve = resolve;\n\t});\n\tpromise[webpackExports] = exports;\n\tpromise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise[\"catch\"](x => {}));\n\tmodule.exports = promise;\n\tbody((deps) => {\n\t\tcurrentDeps = wrapDeps(deps);\n\t\tvar fn;\n\t\tvar getResult = () => (currentDeps.map((d) => {\n\t\t\tif(d[webpackError]) throw d[webpackError];\n\t\t\treturn d[webpackExports];\n\t\t}))\n\t\tvar promise = new Promise((resolve) => {\n\t\t\tfn = () => (resolve(getResult));\n\t\t\tfn.r = 0;\n\t\t\tvar fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));\n\t\t\tcurrentDeps.map((dep) => (dep[webpackQueues](fnQueue)));\n\t\t});\n\t\treturn fn.r ? promise : getResult();\n\t}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));\n\tqueue && queue.d < 0 && (queue.d = 0);\n};","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:cacheable-response:7.0.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */\nclass Deferred {\n    /**\n     * Creates a promise and exposes its resolve and reject functions as methods.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\nexport { Deferred };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messageGenerator } from '../models/messages/messageGenerator.js';\nimport '../_version.js';\n/**\n * Workbox errors should be thrown with this class.\n * This allows use to ensure the type easily in tests,\n * helps developers identify errors from workbox\n * easily and allows use to optimise error\n * messages correctly.\n *\n * @private\n */\nclass WorkboxError extends Error {\n    /**\n     *\n     * @param {string} errorCode The error code that\n     * identifies this particular error.\n     * @param {Object=} details Any relevant arguments\n     * that will help developers identify issues should\n     * be added as a key on the context object.\n     */\n    constructor(errorCode, details) {\n        const message = messageGenerator(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\nexport { WorkboxError };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messages } from './messages.js';\nimport '../../_version.js';\nconst fallback = (code, ...args) => {\n    let msg = code;\n    if (args.length > 0) {\n        msg += ` :: ${JSON.stringify(args)}`;\n    }\n    return msg;\n};\nconst generatorFunction = (code, details = {}) => {\n    const message = messages[code];\n    if (!message) {\n        throw new Error(`Unable to find message for code '${code}'.`);\n    }\n    return message(details);\n};\nexport const messageGenerator = process.env.NODE_ENV === 'production' ? fallback : generatorFunction;\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nfunction stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams) {\n        strippedURL.searchParams.delete(param);\n    }\n    return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param {Cache} cache\n * @param {Request} request\n * @param {Object} matchOptions\n * @param {Array<string>} ignoreParams\n * @return {Promise<Response|undefined>}\n */\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\n    // If the request doesn't include any ignored params, match as normal.\n    if (request.url === strippedRequestURL) {\n        return cache.match(request, matchOptions);\n    }\n    // Otherwise, match by comparing keys\n    const keysOptions = Object.assign(Object.assign({}, matchOptions), { ignoreSearch: true });\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys) {\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) {\n            return cache.match(cacheKey, matchOptions);\n        }\n    }\n    return;\n}\nexport { cacheMatchIgnoreParams };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst _cacheNameDetails = {\n    googleAnalytics: 'googleAnalytics',\n    precache: 'precache-v2',\n    prefix: 'workbox',\n    runtime: 'runtime',\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\n};\nconst _createCacheName = (cacheName) => {\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\n        .filter((value) => value && value.length > 0)\n        .join('-');\n};\nconst eachCacheNameDetail = (fn) => {\n    for (const key of Object.keys(_cacheNameDetails)) {\n        fn(key);\n    }\n};\nexport const cacheNames = {\n    updateDetails: (details) => {\n        eachCacheNameDetail((key) => {\n            if (typeof details[key] === 'string') {\n                _cacheNameDetails[key] = details[key];\n            }\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: () => {\n        return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: () => {\n        return _cacheNameDetails.suffix;\n    },\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nlet supportStatus;\n/**\n * A utility function that determines whether the current browser supports\n * constructing a new `Response` from a `response.body` stream.\n *\n * @return {boolean} `true`, if the current browser can successfully\n *     construct a `Response` from a `response.body` stream, `false` otherwise.\n *\n * @private\n */\nfunction canConstructResponseFromBodyStream() {\n    if (supportStatus === undefined) {\n        const testResponse = new Response('');\n        if ('body' in testResponse) {\n            try {\n                new Response(testResponse.body);\n                supportStatus = true;\n            }\n            catch (error) {\n                supportStatus = false;\n            }\n        }\n        supportStatus = false;\n    }\n    return supportStatus;\n}\nexport { canConstructResponseFromBodyStream };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from '../_private/logger.js';\nimport { quotaErrorCallbacks } from '../models/quotaErrorCallbacks.js';\nimport '../_version.js';\n/**\n * Runs all of the callback functions, one at a time sequentially, in the order\n * in which they were registered.\n *\n * @memberof workbox-core\n * @private\n */\nasync function executeQuotaErrorCallbacks() {\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log(`About to run ${quotaErrorCallbacks.size} ` +\n            `callbacks to clean up caches.`);\n    }\n    for (const callback of quotaErrorCallbacks) {\n        await callback();\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(callback, 'is complete.');\n        }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Finished running callbacks.');\n    }\n}\nexport { executeQuotaErrorCallbacks };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst getFriendlyURL = (url) => {\n    const urlObj = new URL(String(url), location.href);\n    // See https://github.com/GoogleChrome/workbox/issues/2323\n    // We want to include everything, except for the origin if it's same-origin.\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), '');\n};\nexport { getFriendlyURL };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst logger = (process.env.NODE_ENV === 'production'\n    ? null\n    : (() => {\n        // Don't overwrite this value if it's already set.\n        // See https://github.com/GoogleChrome/workbox/pull/2284#issuecomment-560470923\n        if (!('__WB_DISABLE_DEV_LOGS' in globalThis)) {\n            self.__WB_DISABLE_DEV_LOGS = false;\n        }\n        let inGroup = false;\n        const methodToColorMap = {\n            debug: `#7f8c8d`,\n            log: `#2ecc71`,\n            warn: `#f39c12`,\n            error: `#c0392b`,\n            groupCollapsed: `#3498db`,\n            groupEnd: null, // No colored prefix on groupEnd\n        };\n        const print = function (method, args) {\n            if (self.__WB_DISABLE_DEV_LOGS) {\n                return;\n            }\n            if (method === 'groupCollapsed') {\n                // Safari doesn't print all console.groupCollapsed() arguments:\n                // https://bugs.webkit.org/show_bug.cgi?id=182754\n                if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n                    console[method](...args);\n                    return;\n                }\n            }\n            const styles = [\n                `background: ${methodToColorMap[method]}`,\n                `border-radius: 0.5em`,\n                `color: white`,\n                `font-weight: bold`,\n                `padding: 2px 0.5em`,\n            ];\n            // When in a group, the workbox prefix is not displayed.\n            const logPrefix = inGroup ? [] : ['%cworkbox', styles.join(';')];\n            console[method](...logPrefix, ...args);\n            if (method === 'groupCollapsed') {\n                inGroup = true;\n            }\n            if (method === 'groupEnd') {\n                inGroup = false;\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/ban-types\n        const api = {};\n        const loggerMethods = Object.keys(methodToColorMap);\n        for (const key of loggerMethods) {\n            const method = key;\n            api[method] = (...args) => {\n                print(method, args);\n            };\n        }\n        return api;\n    })());\nexport { logger };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Returns a promise that resolves and the passed number of milliseconds.\n * This utility is an async/await-friendly version of `setTimeout`.\n *\n * @param {number} ms\n * @return {Promise}\n * @private\n */\nexport function timeout(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A utility method that makes it easier to use `event.waitUntil` with\n * async functions and return the result.\n *\n * @param {ExtendableEvent} event\n * @param {Function} asyncFn\n * @return {Function}\n * @private\n */\nfunction waitUntil(event, asyncFn) {\n    const returnPromise = asyncFn();\n    event.waitUntil(returnPromise);\n    return returnPromise;\n}\nexport { waitUntil };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:core:7.0.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\nimport { WorkboxError } from './_private/WorkboxError.js';\nimport './_version.js';\n/**\n * Allows developers to copy a response and modify its `headers`, `status`,\n * or `statusText` values (the values settable via a\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\n * object in the constructor).\n * To modify these values, pass a function as the second argument. That\n * function will be invoked with a single object with the response properties\n * `{headers, status, statusText}`. The return value of this function will\n * be used as the `ResponseInit` for the new `Response`. To change the values\n * either modify the passed parameter(s) and return it, or return a totally\n * new object.\n *\n * This method is intentionally limited to same-origin responses, regardless of\n * whether CORS was used or not.\n *\n * @param {Response} response\n * @param {Function} modifier\n * @memberof workbox-core\n */\nasync function copyResponse(response, modifier) {\n    let origin = null;\n    // If response.url isn't set, assume it's cross-origin and keep origin null.\n    if (response.url) {\n        const responseURL = new URL(response.url);\n        origin = responseURL.origin;\n    }\n    if (origin !== self.location.origin) {\n        throw new WorkboxError('cross-origin-copy-response', { origin });\n    }\n    const clonedResponse = response.clone();\n    // Create a fresh `ResponseInit` object by cloning the headers.\n    const responseInit = {\n        headers: new Headers(clonedResponse.headers),\n        status: clonedResponse.status,\n        statusText: clonedResponse.statusText,\n    };\n    // Apply any user modifications.\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\n    // Create the new response from the body stream and `ResponseInit`\n    // modifications. Note: not all browsers support the Response.body stream,\n    // so fall back to reading the entire body into memory as a blob.\n    const body = canConstructResponseFromBodyStream()\n        ? clonedResponse.body\n        : await clonedResponse.blob();\n    return new Response(body, modifiedResponseInit);\n}\nexport { copyResponse };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n// Callbacks to be executed whenever there's a quota error.\n// Can't change Function type right now.\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst quotaErrorCallbacks = new Set();\nexport { quotaErrorCallbacks };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:expiration:7.0.0'] && _();\n}\ncatch (e) { }\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:precaching:7.0.0'] && _();\n}\ncatch (e) { }\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:range-requests:7.0.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * {@link workbox-routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * @memberof workbox-routing\n * @extends workbox-routing.Route\n */\nclass RegExpRoute extends Route {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * {@link workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(regExp, handler, method) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(regExp, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'RegExpRoute',\n                funcName: 'constructor',\n                paramName: 'pattern',\n            });\n        }\n        const match = ({ url }) => {\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) {\n                return;\n            }\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if (url.origin !== location.origin && result.index !== 0) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`The regular expression '${regExp.toString()}' only partially matched ` +\n                        `against the cross-origin URL '${url.toString()}'. RegExpRoute's will only ` +\n                        `handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\nexport { RegExpRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof workbox-routing\n */\nclass Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method = defaultMethod) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(match, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'match',\n            });\n            if (method) {\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\n            }\n        }\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n    /**\n     *\n     * @param {workbox-routing-handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response\n     */\n    setCatchHandler(handler) {\n        this.catchHandler = normalizeHandler(handler);\n    }\n}\nexport { Route };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { defaultMethod } from './utils/constants.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\n/**\n * The Router can be used to process a `FetchEvent` using one or more\n * {@link workbox-routing.Route}, responding with a `Response` if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n        this._defaultHandlerMap = new Map();\n    }\n    /**\n     * @return {Map<string, Array<workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request } = event;\n            const responsePromise = this.handleRequest({ request, event });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        }));\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            // event.data is type 'any'\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (event.data && event.data.type === 'CACHE_URLS') {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const { payload } = event.data;\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request, event });\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    void requestPromises.then(() => event.ports[0].postMessage(true));\n                }\n            }\n        }));\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle.\n     * @param {ExtendableEvent} options.event The event that triggered the\n     *     request.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event, }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const sameOrigin = url.origin === location.origin;\n        const { params, route } = this.findMatchingRoute({\n            event,\n            request,\n            sameOrigin,\n            url,\n        });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([`Found a route to handle this request:`, route]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`,\n                        params,\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        const method = request.method;\n        if (!handler && this._defaultHandlerMap.has(method)) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler for ${method}.`);\n            }\n            handler = this._defaultHandlerMap.get(method);\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                }\n                else {\n                    logger.log(msg);\n                }\n            });\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params });\n        }\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        // Get route's catch handler, if it exists\n        const catchHandler = route && route.catchHandler;\n        if (responsePromise instanceof Promise &&\n            (this._catchHandler || catchHandler)) {\n            responsePromise = responsePromise.catch(async (err) => {\n                // If there's a route catch handler, process that first\n                if (catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to route's Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    try {\n                        return await catchHandler.handle({ url, request, event, params });\n                    }\n                    catch (catchErr) {\n                        if (catchErr instanceof Error) {\n                            err = catchErr;\n                        }\n                    }\n                }\n                if (this._catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to global Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    return this._catchHandler.handle({ url, request, event });\n                }\n                throw err;\n            });\n        }\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {boolean} options.sameOrigin The result of comparing `url.origin`\n     *     against the current origin.\n     * @param {Request} options.request The request to match.\n     * @param {Event} options.event The corresponding event.\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, sameOrigin, request, event, }) {\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            // route.match returns type any, not possible to change right now.\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const matchResult = route.match({ url, sameOrigin, request, event });\n            if (matchResult) {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Warn developers that using an async matchCallback is almost always\n                    // not the right thing to do.\n                    if (matchResult instanceof Promise) {\n                        logger.warn(`While routing ${getFriendlyURL(url)}, an async ` +\n                            `matchCallback function was used. Please convert the ` +\n                            `following route to use a synchronous matchCallback function:`, route);\n                    }\n                }\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                params = matchResult;\n                if (Array.isArray(params) && params.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                }\n                else if (matchResult.constructor === Object && // eslint-disable-line\n                    Object.keys(matchResult).length === 0) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                }\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return { route, params };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to associate with this\n     * default handler. Each method has its own default.\n     */\n    setDefaultHandler(handler, method = defaultMethod) {\n        this._defaultHandlerMap.set(method, normalizeHandler(handler));\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            });\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        }\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        }\n    }\n}\nexport { Router };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:routing:7.0.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Route } from './Route.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call {@link workbox-routing.Router#registerRoute}.\n *\n * @param {RegExp|string|workbox-routing.Route~matchCallback|workbox-routing.Route} capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {workbox-routing~handlerCallback} [handler] A callback\n * function that returns a Promise resulting in a Response. This parameter\n * is required if `capture` is not a `Route` object.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {workbox-routing.Route} The generated `Route`.\n *\n * @memberof workbox-routing\n */\nfunction registerRoute(capture, handler, method) {\n    let route;\n    if (typeof capture === 'string') {\n        const captureUrl = new URL(capture, location.href);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n                throw new WorkboxError('invalid-string', {\n                    moduleName: 'workbox-routing',\n                    funcName: 'registerRoute',\n                    paramName: 'capture',\n                });\n            }\n            // We want to check if Express-style wildcards are in the pathname only.\n            // TODO: Remove this log message in v4.\n            const valueToCheck = capture.startsWith('http')\n                ? captureUrl.pathname\n                : capture;\n            // See https://github.com/pillarjs/path-to-regexp#parameters\n            const wildcards = '[*:?+]';\n            if (new RegExp(`${wildcards}`).exec(valueToCheck)) {\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +\n                    `character (${wildcards}). Strings are now always interpreted as ` +\n                    `exact matches; use a RegExp for partial or wildcard matches.`);\n            }\n        }\n        const matchCallback = ({ url }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if (url.pathname === captureUrl.pathname &&\n                    url.origin !== captureUrl.origin) {\n                    logger.debug(`${capture} only partially matches the cross-origin URL ` +\n                        `${url.toString()}. This route will only handle cross-origin requests ` +\n                        `if they match the entire URL.`);\n                }\n            }\n            return url.href === captureUrl.href;\n        };\n        // If `capture` is a string then `handler` and `method` must be present.\n        route = new Route(matchCallback, handler, method);\n    }\n    else if (capture instanceof RegExp) {\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\n        route = new RegExpRoute(capture, handler, method);\n    }\n    else if (typeof capture === 'function') {\n        // If `capture` is a function then `handler` and `method` must be present.\n        route = new Route(capture, handler, method);\n    }\n    else if (capture instanceof Route) {\n        route = capture;\n    }\n    else {\n        throw new WorkboxError('unsupported-route-type', {\n            moduleName: 'workbox-routing',\n            funcName: 'registerRoute',\n            paramName: 'capture',\n        });\n    }\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n}\nexport { registerRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string}\n *\n * @private\n */\nexport const defaultMethod = 'GET';\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>}\n *\n * @private\n */\nexport const validMethods = [\n    'DELETE',\n    'GET',\n    'HEAD',\n    'PATCH',\n    'POST',\n    'PUT',\n];\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Router } from '../Router.js';\nimport '../_version.js';\nlet defaultRouter;\n/**\n * Creates a new, singleton Router instance if one does not exist. If one\n * does already exist, that instance is returned.\n *\n * @private\n * @return {Router}\n */\nexport const getOrCreateDefaultRouter = () => {\n    if (!defaultRouter) {\n        defaultRouter = new Router();\n        // The helpers that use the default Router assume these listeners exist.\n        defaultRouter.addFetchListener();\n        defaultRouter.addCacheListener();\n    }\n    return defaultRouter;\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {function()|Object} handler Either a function, or an object with a\n * 'handle' method.\n * @return {Object} An object with a handle method.\n *\n * @private\n */\nexport const normalizeHandler = (handler) => {\n    if (handler && typeof handler === 'object') {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.hasMethod(handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return handler;\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(handler, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return { handle: handler };\n    }\n};\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { StrategyHandler } from './StrategyHandler.js';\nimport './_version.js';\n/**\n * An abstract base class that all other strategy classes must extend from:\n *\n * @memberof workbox-strategies\n */\nclass Strategy {\n    /**\n     * Creates a new instance of the strategy and sets all documented option\n     * properties as public instance properties.\n     *\n     * Note: if a custom strategy class extends the base Strategy class and does\n     * not need more than these properties, it does not need to define its own\n     * constructor.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     */\n    constructor(options = {}) {\n        /**\n         * Cache name to store and retrieve\n         * requests. Defaults to the cache names provided by\n         * {@link workbox-core.cacheNames}.\n         *\n         * @type {string}\n         */\n        this.cacheName = cacheNames.getRuntimeName(options.cacheName);\n        /**\n         * The list\n         * [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n         * used by this strategy.\n         *\n         * @type {Array<Object>}\n         */\n        this.plugins = options.plugins || [];\n        /**\n         * Values passed along to the\n         * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\n         * of all fetch() requests made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.fetchOptions = options.fetchOptions;\n        /**\n         * The\n         * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n         * for any `cache.match()` or `cache.put()` calls made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.matchOptions = options.matchOptions;\n    }\n    /**\n     * Perform a request strategy and returns a `Promise` that will resolve with\n     * a `Response`, invoking all relevant plugin callbacks.\n     *\n     * When a strategy instance is registered with a Workbox\n     * {@link workbox-routing.Route}, this method is automatically\n     * called when the route matches.\n     *\n     * Alternatively, this method can be used in a standalone `FetchEvent`\n     * listener by passing it to `event.respondWith()`.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     */\n    handle(options) {\n        const [responseDone] = this.handleAll(options);\n        return responseDone;\n    }\n    /**\n     * Similar to {@link workbox-strategies.Strategy~handle}, but\n     * instead of just returning a `Promise` that resolves to a `Response` it\n     * it will return an tuple of `[response, done]` promises, where the former\n     * (`response`) is equivalent to what `handle()` returns, and the latter is a\n     * Promise that will resolve once any promises that were added to\n     * `event.waitUntil()` as part of performing the strategy have completed.\n     *\n     * You can await the `done` promise to ensure any extra work performed by\n     * the strategy (usually caching responses) completes successfully.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     * @return {Array<Promise>} A tuple of [response, done]\n     *     promises that can be used to determine when the response resolves as\n     *     well as when the handler has completed all its work.\n     */\n    handleAll(options) {\n        // Allow for flexible options to be passed.\n        if (options instanceof FetchEvent) {\n            options = {\n                event: options,\n                request: options.request,\n            };\n        }\n        const event = options.event;\n        const request = typeof options.request === 'string'\n            ? new Request(options.request)\n            : options.request;\n        const params = 'params' in options ? options.params : undefined;\n        const handler = new StrategyHandler(this, { event, request, params });\n        const responseDone = this._getResponse(handler, request, event);\n        const handlerDone = this._awaitComplete(responseDone, handler, request, event);\n        // Return an array of promises, suitable for use with Promise.all().\n        return [responseDone, handlerDone];\n    }\n    async _getResponse(handler, request, event) {\n        await handler.runCallbacks('handlerWillStart', { event, request });\n        let response = undefined;\n        try {\n            response = await this._handle(request, handler);\n            // The \"official\" Strategy subclasses all throw this error automatically,\n            // but in case a third-party Strategy doesn't, ensure that we have a\n            // consistent failure when there's no response or an error response.\n            if (!response || response.type === 'error') {\n                throw new WorkboxError('no-response', { url: request.url });\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                for (const callback of handler.iterateCallbacks('handlerDidError')) {\n                    response = await callback({ error, event, request });\n                    if (response) {\n                        break;\n                    }\n                }\n            }\n            if (!response) {\n                throw error;\n            }\n            else if (process.env.NODE_ENV !== 'production') {\n                logger.log(`While responding to '${getFriendlyURL(request.url)}', ` +\n                    `an ${error instanceof Error ? error.toString() : ''} error occurred. Using a fallback response provided by ` +\n                    `a handlerDidError plugin.`);\n            }\n        }\n        for (const callback of handler.iterateCallbacks('handlerWillRespond')) {\n            response = await callback({ event, request, response });\n        }\n        return response;\n    }\n    async _awaitComplete(responseDone, handler, request, event) {\n        let response;\n        let error;\n        try {\n            response = await responseDone;\n        }\n        catch (error) {\n            // Ignore errors, as response errors should be caught via the `response`\n            // promise above. The `done` promise will only throw for errors in\n            // promises passed to `handler.waitUntil()`.\n        }\n        try {\n            await handler.runCallbacks('handlerDidRespond', {\n                event,\n                request,\n                response,\n            });\n            await handler.doneWaiting();\n        }\n        catch (waitUntilError) {\n            if (waitUntilError instanceof Error) {\n                error = waitUntilError;\n            }\n        }\n        await handler.runCallbacks('handlerDidComplete', {\n            event,\n            request,\n            response,\n            error: error,\n        });\n        handler.destroy();\n        if (error) {\n            throw error;\n        }\n    }\n}\nexport { Strategy };\n/**\n * Classes extending the `Strategy` based class should implement this method,\n * and leverage the {@link workbox-strategies.StrategyHandler}\n * arg to perform all fetching and cache logic, which will ensure all relevant\n * cache, cache options, fetch options and plugins are used (per the current\n * strategy instance).\n *\n * @name _handle\n * @instance\n * @abstract\n * @function\n * @param {Request} request\n * @param {workbox-strategies.StrategyHandler} handler\n * @return {Promise<Response>}\n *\n * @memberof workbox-strategies.Strategy\n */\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\nfunction toRequest(input) {\n    return typeof input === 'string' ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls\n * {@link workbox-strategies.Strategy~handle} or\n * {@link workbox-strategies.Strategy~handleAll} that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof workbox-strategies\n */\nclass StrategyHandler {\n    /**\n     * Creates a new instance associated with the passed strategy and event\n     * that's handling the request.\n     *\n     * The constructor also initializes the state that will be passed to each of\n     * the plugins handling this request.\n     *\n     * @param {workbox-strategies.Strategy} strategy\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params] The return value from the\n     *     {@link workbox-routing~matchCallback} (if applicable).\n     */\n    constructor(strategy, options) {\n        this._cacheKeys = {};\n        /**\n         * The request the strategy is performing (passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * @name request\n         * @instance\n         * @type {Request}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * The event associated with this request.\n         * @name event\n         * @instance\n         * @type {ExtendableEvent}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `URL` instance of `request.url` (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `url` param will be present if the strategy was invoked\n         * from a workbox `Route` object.\n         * @name url\n         * @instance\n         * @type {URL|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `param` value (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `param` param will be present if the strategy was invoked\n         * from a workbox `Route` object and the\n         * {@link workbox-routing~matchCallback} returned\n         * a truthy value (it will be that value).\n         * @name params\n         * @instance\n         * @type {*|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(options.event, ExtendableEvent, {\n                moduleName: 'workbox-strategies',\n                className: 'StrategyHandler',\n                funcName: 'constructor',\n                paramName: 'options.event',\n            });\n        }\n        Object.assign(this, options);\n        this.event = options.event;\n        this._strategy = strategy;\n        this._handlerDeferred = new Deferred();\n        this._extendLifetimePromises = [];\n        // Copy the plugins list (since it's mutable on the strategy),\n        // so any mutations don't affect this handler instance.\n        this._plugins = [...strategy.plugins];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins) {\n            this._pluginStateMap.set(plugin, {});\n        }\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    /**\n     * Fetches a given request (and invokes any applicable plugin callback\n     * methods) using the `fetchOptions` (for non-navigation requests) and\n     * `plugins` defined on the `Strategy` object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - `requestWillFetch()`\n     * - `fetchDidSucceed()`\n     * - `fetchDidFail()`\n     *\n     * @param {Request|string} input The URL or request to fetch.\n     * @return {Promise<Response>}\n     */\n    async fetch(input) {\n        const { event } = this;\n        let request = toRequest(input);\n        if (request.mode === 'navigate' &&\n            event instanceof FetchEvent &&\n            event.preloadResponse) {\n            const possiblePreloadResponse = (await event.preloadResponse);\n            if (possiblePreloadResponse) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Using a preloaded navigation response for ` +\n                        `'${getFriendlyURL(request.url)}'`);\n                }\n                return possiblePreloadResponse;\n            }\n        }\n        // If there is a fetchDidFail plugin, we need to save a clone of the\n        // original request before it's either modified by a requestWillFetch\n        // plugin or before the original request's body is consumed via fetch().\n        const originalRequest = this.hasCallback('fetchDidFail')\n            ? request.clone()\n            : null;\n        try {\n            for (const cb of this.iterateCallbacks('requestWillFetch')) {\n                request = await cb({ request: request.clone(), event });\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                throw new WorkboxError('plugin-error-request-will-fetch', {\n                    thrownErrorMessage: err.message,\n                });\n            }\n        }\n        // The request can be altered by plugins with `requestWillFetch` making\n        // the original request (most likely from a `fetch` event) different\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            // See https://github.com/GoogleChrome/workbox/issues/1796\n            fetchResponse = await fetch(request, request.mode === 'navigate' ? undefined : this._strategy.fetchOptions);\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' returned a response with ` +\n                    `status '${fetchResponse.status}'.`);\n            }\n            for (const callback of this.iterateCallbacks('fetchDidSucceed')) {\n                fetchResponse = await callback({\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n            }\n            return fetchResponse;\n        }\n        catch (error) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' threw an error.`, error);\n            }\n            // `originalRequest` will only exist if a `fetchDidFail` callback\n            // is being used (see above).\n            if (originalRequest) {\n                await this.runCallbacks('fetchDidFail', {\n                    error: error,\n                    event,\n                    originalRequest: originalRequest.clone(),\n                    request: pluginFilteredRequest.clone(),\n                });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n     * the response generated by `this.fetch()`.\n     *\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n     * so you do not have to manually call `waitUntil()` on the event.\n     *\n     * @param {Request|string} input The request or URL to fetch and cache.\n     * @return {Promise<Response>}\n     */\n    async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        void this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    /**\n     * Matches a request from the cache (and invokes any applicable plugin\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n     * defined on the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cachedResponseWillByUsed()\n     *\n     * @param {Request|string} key The Request or URL to use as the cache key.\n     * @return {Promise<Response|undefined>} A matching response, if found.\n     */\n    async cacheMatch(key) {\n        const request = toRequest(key);\n        let cachedResponse;\n        const { cacheName, matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, 'read');\n        const multiMatchOptions = Object.assign(Object.assign({}, matchOptions), { cacheName });\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        if (process.env.NODE_ENV !== 'production') {\n            if (cachedResponse) {\n                logger.debug(`Found a cached response in '${cacheName}'.`);\n            }\n            else {\n                logger.debug(`No cached response found in '${cacheName}'.`);\n            }\n        }\n        for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed')) {\n            cachedResponse =\n                (await callback({\n                    cacheName,\n                    matchOptions,\n                    cachedResponse,\n                    request: effectiveRequest,\n                    event: this.event,\n                })) || undefined;\n        }\n        return cachedResponse;\n    }\n    /**\n     * Puts a request/response pair in the cache (and invokes any applicable\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\n     * the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cacheWillUpdate()\n     * - cacheDidUpdate()\n     *\n     * @param {Request|string} key The request or URL to use as the cache key.\n     * @param {Response} response The response to cache.\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\n     * not be cached, and `true` otherwise.\n     */\n    async cachePut(key, response) {\n        const request = toRequest(key);\n        // Run in the next task to avoid blocking other cache reads.\n        // https://github.com/w3c/ServiceWorker/issues/1397\n        await timeout(0);\n        const effectiveRequest = await this.getCacheKey(request, 'write');\n        if (process.env.NODE_ENV !== 'production') {\n            if (effectiveRequest.method && effectiveRequest.method !== 'GET') {\n                throw new WorkboxError('attempt-to-cache-non-get-request', {\n                    url: getFriendlyURL(effectiveRequest.url),\n                    method: effectiveRequest.method,\n                });\n            }\n            // See https://github.com/GoogleChrome/workbox/issues/2818\n            const vary = response.headers.get('Vary');\n            if (vary) {\n                logger.debug(`The response for ${getFriendlyURL(effectiveRequest.url)} ` +\n                    `has a 'Vary: ${vary}' header. ` +\n                    `Consider setting the {ignoreVary: true} option on your strategy ` +\n                    `to ensure cache matching and deletion works as expected.`);\n            }\n        }\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.error(`Cannot cache non-existent response for ` +\n                    `'${getFriendlyURL(effectiveRequest.url)}'.`);\n            }\n            throw new WorkboxError('cache-put-with-no-response', {\n                url: getFriendlyURL(effectiveRequest.url),\n            });\n        }\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' ` +\n                    `will not be cached.`, responseToCache);\n            }\n            return false;\n        }\n        const { cacheName, matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n        const oldResponse = hasCacheUpdateCallback\n            ? await cacheMatchIgnoreParams(\n            // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n            // feature. Consider into ways to only add this behavior if using\n            // precaching.\n            cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions)\n            : null;\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Updating the '${cacheName}' cache with a new Response ` +\n                `for ${getFriendlyURL(effectiveRequest.url)}.`);\n        }\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n                if (error.name === 'QuotaExceededError') {\n                    await executeQuotaErrorCallbacks();\n                }\n                throw error;\n            }\n        }\n        for (const callback of this.iterateCallbacks('cacheDidUpdate')) {\n            await callback({\n                cacheName,\n                oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event,\n            });\n        }\n        return true;\n    }\n    /**\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n     * executes any of those callbacks found in sequence. The final `Request`\n     * object returned by the last plugin is treated as the cache key for cache\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n     * been registered, the passed request is returned unmodified\n     *\n     * @param {Request} request\n     * @param {string} mode\n     * @return {Promise<Request>}\n     */\n    async getCacheKey(request, mode) {\n        const key = `${request.url} | ${mode}`;\n        if (!this._cacheKeys[key]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed')) {\n                effectiveRequest = toRequest(await callback({\n                    mode,\n                    request: effectiveRequest,\n                    event: this.event,\n                    // params has a type any can't change right now.\n                    params: this.params, // eslint-disable-line\n                }));\n            }\n            this._cacheKeys[key] = effectiveRequest;\n        }\n        return this._cacheKeys[key];\n    }\n    /**\n     * Returns true if the strategy has at least one plugin with the given\n     * callback.\n     *\n     * @param {string} name The name of the callback to check for.\n     * @return {boolean}\n     */\n    hasCallback(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (name in plugin) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Runs all plugin callbacks matching the given name, in order, passing the\n     * given param object (merged ith the current plugin state) as the only\n     * argument.\n     *\n     * Note: since this method runs all plugins, it's not suitable for cases\n     * where the return value of a callback needs to be applied prior to calling\n     * the next callback. See\n     * {@link workbox-strategies.StrategyHandler#iterateCallbacks}\n     * below for how to handle that case.\n     *\n     * @param {string} name The name of the callback to run within each plugin.\n     * @param {Object} param The object to pass as the first (and only) param\n     *     when executing each callback. This object will be merged with the\n     *     current plugin state prior to callback execution.\n     */\n    async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name)) {\n            // TODO(philipwalton): not sure why `any` is needed. It seems like\n            // this should work with `as WorkboxPluginCallbackParam[C]`.\n            await callback(param);\n        }\n    }\n    /**\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\n     * where each callback is wrapped with the current handler state (i.e. when\n     * you call each callback, whatever object parameter you pass it will\n     * be merged with the plugin's current state).\n     *\n     * @param {string} name The name fo the callback to run\n     * @return {Array<Function>}\n     */\n    *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (typeof plugin[name] === 'function') {\n                const state = this._pluginStateMap.get(plugin);\n                const statefulCallback = (param) => {\n                    const statefulParam = Object.assign(Object.assign({}, param), { state });\n                    // TODO(philipwalton): not sure why `any` is needed. It seems like\n                    // this should work with `as WorkboxPluginCallbackParam[C]`.\n                    return plugin[name](statefulParam);\n                };\n                yield statefulCallback;\n            }\n        }\n    }\n    /**\n     * Adds a promise to the\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\n     * of the event event associated with the request being handled (usually a\n     * `FetchEvent`).\n     *\n     * Note: you can await\n     * {@link workbox-strategies.StrategyHandler~doneWaiting}\n     * to know when all added promises have settled.\n     *\n     * @param {Promise} promise A promise to add to the extend lifetime promises\n     *     of the event that triggered the request.\n     */\n    waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    /**\n     * Returns a promise that resolves once all promises passed to\n     * {@link workbox-strategies.StrategyHandler~waitUntil}\n     * have settled.\n     *\n     * Note: any work done after `doneWaiting()` settles should be manually\n     * passed to an event's `waitUntil()` method (not this handler's\n     * `waitUntil()` method), otherwise the service worker thread my be killed\n     * prior to your work completing.\n     */\n    async doneWaiting() {\n        let promise;\n        while ((promise = this._extendLifetimePromises.shift())) {\n            await promise;\n        }\n    }\n    /**\n     * Stops running the strategy and immediately resolves any pending\n     * `waitUntil()` promises.\n     */\n    destroy() {\n        this._handlerDeferred.resolve(null);\n    }\n    /**\n     * This method will call cacheWillUpdate on the available plugins (or use\n     * status === 200) to determine if the Response is safe and valid to cache.\n     *\n     * @param {Request} options.request\n     * @param {Response} options.response\n     * @return {Promise<Response|undefined>}\n     *\n     * @private\n     */\n    async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks('cacheWillUpdate')) {\n            responseToCache =\n                (await callback({\n                    request: this.request,\n                    response: responseToCache,\n                    event: this.event,\n                })) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) {\n                break;\n            }\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) {\n                responseToCache = undefined;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                            logger.warn(`The response for '${this.request.url}' ` +\n                                `is an opaque response. The caching strategy that you're ` +\n                                `using will not cache opaque responses by default.`);\n                        }\n                        else {\n                            logger.debug(`The response for '${this.request.url}' ` +\n                                `returned a status code of '${response.status}' and won't ` +\n                                `be cached as a result.`);\n                        }\n                    }\n                }\n            }\n        }\n        return responseToCache;\n    }\n}\nexport { StrategyHandler };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:strategies:7.0.0'] && _();\n}\ncatch (e) { }\n","try{self[\"workbox:window:7.0.0\"]&&_()}catch(n){}function n(n,t){return new Promise((function(r){var e=new MessageChannel;e.port1.onmessage=function(n){r(n.data)},n.postMessage(t,[e.port2])}))}function t(n,t){for(var r=0;r<t.length;r++){var e=t[r];e.enumerable=e.enumerable||!1,e.configurable=!0,\"value\"in e&&(e.writable=!0),Object.defineProperty(n,e.key,e)}}function r(n,t){(null==t||t>n.length)&&(t=n.length);for(var r=0,e=new Array(t);r<t;r++)e[r]=n[r];return e}function e(n,t){var e;if(\"undefined\"==typeof Symbol||null==n[Symbol.iterator]){if(Array.isArray(n)||(e=function(n,t){if(n){if(\"string\"==typeof n)return r(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);return\"Object\"===e&&n.constructor&&(e=n.constructor.name),\"Map\"===e||\"Set\"===e?Array.from(n):\"Arguments\"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?r(n,t):void 0}}(n))||t&&n&&\"number\"==typeof n.length){e&&(n=e);var i=0;return function(){return i>=n.length?{done:!0}:{done:!1,value:n[i++]}}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}return(e=n[Symbol.iterator]()).next.bind(e)}try{self[\"workbox:core:7.0.0\"]&&_()}catch(n){}var i=function(){var n=this;this.promise=new Promise((function(t,r){n.resolve=t,n.reject=r}))};function o(n,t){var r=location.href;return new URL(n,r).href===new URL(t,r).href}var u=function(n,t){this.type=n,Object.assign(this,t)};function a(n,t,r){return r?t?t(n):n:(n&&n.then||(n=Promise.resolve(n)),t?n.then(t):n)}function c(){}var f={type:\"SKIP_WAITING\"};function s(n,t){if(!t)return n&&n.then?n.then(c):Promise.resolve()}var v=function(r){var e,c;function v(n,t){var e,c;return void 0===t&&(t={}),(e=r.call(this)||this).nn={},e.tn=0,e.rn=new i,e.en=new i,e.on=new i,e.un=0,e.an=new Set,e.cn=function(){var n=e.fn,t=n.installing;e.tn>0||!o(t.scriptURL,e.sn.toString())||performance.now()>e.un+6e4?(e.vn=t,n.removeEventListener(\"updatefound\",e.cn)):(e.hn=t,e.an.add(t),e.rn.resolve(t)),++e.tn,t.addEventListener(\"statechange\",e.ln)},e.ln=function(n){var t=e.fn,r=n.target,i=r.state,o=r===e.vn,a={sw:r,isExternal:o,originalEvent:n};!o&&e.mn&&(a.isUpdate=!0),e.dispatchEvent(new u(i,a)),\"installed\"===i?e.wn=self.setTimeout((function(){\"installed\"===i&&t.waiting===r&&e.dispatchEvent(new u(\"waiting\",a))}),200):\"activating\"===i&&(clearTimeout(e.wn),o||e.en.resolve(r))},e.dn=function(n){var t=e.hn,r=t!==navigator.serviceWorker.controller;e.dispatchEvent(new u(\"controlling\",{isExternal:r,originalEvent:n,sw:t,isUpdate:e.mn})),r||e.on.resolve(t)},e.gn=(c=function(n){var t=n.data,r=n.ports,i=n.source;return a(e.getSW(),(function(){e.an.has(i)&&e.dispatchEvent(new u(\"message\",{data:t,originalEvent:n,ports:r,sw:i}))}))},function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];try{return Promise.resolve(c.apply(this,n))}catch(n){return Promise.reject(n)}}),e.sn=n,e.nn=t,navigator.serviceWorker.addEventListener(\"message\",e.gn),e}c=r,(e=v).prototype=Object.create(c.prototype),e.prototype.constructor=e,e.__proto__=c;var h,l,m,w=v.prototype;return w.register=function(n){var t=(void 0===n?{}:n).immediate,r=void 0!==t&&t;try{var e=this;return function(n,t){var r=n();if(r&&r.then)return r.then(t);return t(r)}((function(){if(!r&&\"complete\"!==document.readyState)return s(new Promise((function(n){return window.addEventListener(\"load\",n)})))}),(function(){return e.mn=Boolean(navigator.serviceWorker.controller),e.yn=e.pn(),a(e.bn(),(function(n){e.fn=n,e.yn&&(e.hn=e.yn,e.en.resolve(e.yn),e.on.resolve(e.yn),e.yn.addEventListener(\"statechange\",e.ln,{once:!0}));var t=e.fn.waiting;return t&&o(t.scriptURL,e.sn.toString())&&(e.hn=t,Promise.resolve().then((function(){e.dispatchEvent(new u(\"waiting\",{sw:t,wasWaitingBeforeRegister:!0}))})).then((function(){}))),e.hn&&(e.rn.resolve(e.hn),e.an.add(e.hn)),e.fn.addEventListener(\"updatefound\",e.cn),navigator.serviceWorker.addEventListener(\"controllerchange\",e.dn),e.fn}))}))}catch(n){return Promise.reject(n)}},w.update=function(){try{return this.fn?s(this.fn.update()):void 0}catch(n){return Promise.reject(n)}},w.getSW=function(){return void 0!==this.hn?Promise.resolve(this.hn):this.rn.promise},w.messageSW=function(t){try{return a(this.getSW(),(function(r){return n(r,t)}))}catch(n){return Promise.reject(n)}},w.messageSkipWaiting=function(){this.fn&&this.fn.waiting&&n(this.fn.waiting,f)},w.pn=function(){var n=navigator.serviceWorker.controller;return n&&o(n.scriptURL,this.sn.toString())?n:void 0},w.bn=function(){try{var n=this;return function(n,t){try{var r=n()}catch(n){return t(n)}if(r&&r.then)return r.then(void 0,t);return r}((function(){return a(navigator.serviceWorker.register(n.sn,n.nn),(function(t){return n.un=performance.now(),t}))}),(function(n){throw n}))}catch(n){return Promise.reject(n)}},h=v,(l=[{key:\"active\",get:function(){return this.en.promise}},{key:\"controlling\",get:function(){return this.on.promise}}])&&t(h.prototype,l),m&&t(h,m),v}(function(){function n(){this.Pn=new Map}var t=n.prototype;return t.addEventListener=function(n,t){this.Sn(n).add(t)},t.removeEventListener=function(n,t){this.Sn(n).delete(t)},t.dispatchEvent=function(n){n.target=this;for(var t,r=e(this.Sn(n.type));!(t=r()).done;){(0,t.value)(n)}},t.Sn=function(n){return this.Pn.has(n)||this.Pn.set(n,new Set),this.Pn.get(n)},n}());export{v as Workbox,u as WorkboxEvent,n as messageSW};\n//# sourceMappingURL=workbox-window.prod.es5.mjs.map\n","import {Workbox} from 'workbox-window';\r\n\r\n\r\nif (\"serviceWorker\" in navigator) {\r\n    // Register a service worker hosted at the root of the\r\n    // site using the default scope.\r\n    navigator.serviceWorker.register(\"/sw.js\").then(\r\n      (registration) => {\r\n        console.log(\"Service worker registration succeeded:\", registration);\r\n       //getServer(\"https://onedrive.live.com/download?resid=C666C0F21C2911C5%21158615&authkey=!AKdrkvrmpF_M02E\")\r\n      },\r\n      (error) => {\r\n        console.error(`Service worker registration failed: ${error}`);\r\n      },\r\n    );\r\n  } else {\r\n    console.error(\"Service workers are not supported.\");\r\n  }\r\n\r\n  async function getServer(file) {\r\n    let myObject = await fetch(file,{mode: 'cors'});\r\n    console.log(await myObject)\r\n  }","import app from './app.js'\r\nimport sw from './swlessoverhead.js'\r\n\r\n\r\n\r\nconsole.log(\"bundeled\")\r\n\r\n\r\n\r\nfunction checkforVideo(e) {\r\n\r\n    var b = setInterval(()=>{\r\n        console.log(\"interval is triggered\")\r\n\r\n        if(e.readyState >= 3){\r\n            //This block of code is triggered when the video is loaded\r\n                console.log(\"Video is loaded\")\r\n            //your code goes here\r\n\r\n            //stop checking every half second\r\n            clearInterval(b);\r\n\r\n        }                   \r\n    },500);\r\n}\r\n/*\r\nconst hidevideo = document.getElementById(\"reel\");\r\nconst video = document.getElementById(\"reel-short\");\r\nvideo.style.display=\"none\"\r\nvideo.addEventListener('canplaythrough', (e) => {\r\nconsole.log(\"Event was triggert\")\r\nvideo.style.display=\"flex\"\r\nhidevideo.style.display=\"none\"\r\n });\r\n\r\n checkforVideo(video)\r\n\r\n*/\r\n\r\n/*\r\n export  async function fetch() {\r\n    // block for half a second to demonstrate asynchronicity\r\n    let myObject = await fetch(\"https://onedrive.live.com/download?resid=C666C0F21C2911C5%21158615&authkey=!AKdrkvrmpF_M02E\",{mode: 'cors'}).then((response)=>\r\n    {\r\n        if(response)\r\n        {return response;}\r\n          \r\nelse{\r\n    return \"did not work\";\r\n}\r\n     } )\r\n}\r\n\r\n*/\r\n\r\n","\r\nimport {precacheAndRoute} from 'workbox-precaching';\r\nimport { skipWaiting, clientsClaim } from \"workbox-core\" \r\nimport {registerRoute} from 'workbox-routing'\r\nimport {CacheableResponsePlugin} from 'workbox-cacheable-response';\r\nimport {StaleWhileRevalidate} from 'workbox-strategies';\r\nimport {ExpirationPlugin} from 'workbox-expiration';\r\nimport {CacheFirst} from 'workbox-strategies';\r\nimport {RangeRequestsPlugin} from 'workbox-range-requests';\r\n\r\n/*Only use the precaching if in production mode otherwise it throws an errpor*/ \r\nif (process.env.NODE_ENV === 'production') {\r\n\r\n  const cacheName = 'static-resources';\r\n  const matchCallback = ({request}) =>\r\n    // CSS\r\n    request.destination === 'style' ||\r\n    // JavaScript\r\n    request.destination === 'image' ||\r\n\r\n  \r\n  registerRoute(\r\n    matchCallback,\r\n    new StaleWhileRevalidate({\r\n      cacheName,\r\n      plugins: [\r\n        new CacheableResponsePlugin({\r\n          statuses: [0, 200],\r\n        }),\r\n      ],\r\n    })\r\n  );\r\n\r\n/*\r\ntry{ registerRoute(\r\n  ({request}) => {\r\n    const {destination} = request;\r\n    console.log(request.origin)\r\n    return destination === 'video'\r\n  },\r\n  new CacheFirst({\r\n    cacheName: 'videocache',\r\n    plugins: [\r\n      new CacheableResponsePlugin({\r\n        statuses: [200]\r\n      }),\r\n      new RangeRequestsPlugin(),\r\n    ],\r\n  }),\r\n);}catch(error)\r\n{\r\nconsole.log(error)\r\n}\r\n */\r\n\r\n  const putInCache = async (request, response) => {\r\n    const cache = await caches.open('v1');\r\n    await cache.put(request, response);\r\n  };\r\n\r\n  const enableNavigationPreload = async () => {\r\n    if (self.registration.navigationPreload) {\r\n      // Enable navigation preloads!\r\n      await self.registration.navigationPreload.enable();\r\n    }\r\n  };\r\n\r\n\r\n  const cacheFirst = async ({ request, preloadResponsePromise, fallbackUrl }) => {\r\n    // First try to get the resource from the cache\r\n    const responseFromCache = await caches.match(request);\r\n    if (responseFromCache) {\r\n      return responseFromCache;\r\n    }\r\n  \r\n    // Next try to use the preloaded response, if it's there\r\n    const preloadResponse = await preloadResponsePromise;\r\n    if (preloadResponse) {\r\n      console.info('using preload response', preloadResponse);\r\n      putInCache(request, preloadResponse.clone());\r\n      return preloadResponse;\r\n    }\r\n  \r\n    // Next try to get the resource from the network\r\n    try {\r\n      const responseFromNetwork = await fetch(request.clone());\r\n      // response may be used only once\r\n      // we need to save clone to put one copy in cache\r\n      // and serve second one\r\n      \r\n      putInCache(request, responseFromNetwork.clone());\r\n      return responseFromNetwork;\r\n    } catch (error) {\r\n      const fallbackResponse = await caches.match(fallbackUrl);\r\n      if (fallbackResponse) {\r\n        return fallbackResponse;\r\n      }\r\n      // when even the fallback response is not available,\r\n      // there is nothing we can do, but we must always\r\n      // return a Response object\r\n      return new Response('Network error happened', {\r\n        status: 408,\r\n        headers: { 'Content-Type': 'text/plain' },\r\n      });\r\n    }\r\n  };\r\n  \r\n  self.addEventListener('activate', (event) => {\r\n    event.waitUntil(enableNavigationPreload());\r\n  });\r\n  \r\n\r\n  const ArrayWithoutImages=[]\r\n  const processedManifest = (self.__WB_MANIFEST || []).filter((entry) => {\r\n  if(entry.url.endsWith(\".css\" )||entry.url.endsWith(\".html\" ) ||entry.url.endsWith(\".svg\" ))\r\n  {\r\n    console.log(\"Entry: \"+ entry.url)\r\n    ArrayWithoutImages.push(entry.url)\r\n  }\r\n  else{\r\n    return;\r\n  }\r\n})\r\nconsole.log(await ArrayWithoutImages);\r\n    precacheAndRoute(await ArrayWithoutImages)\r\n\r\n  const imagestocache=\"./images\";\r\n\r\n  self.addEventListener('fetch', event => {\r\n\r\n    event.respondWith(\r\n      cacheFirst({\r\n        request: event.request,\r\n        preloadResponsePromise: event.preloadResponse,\r\n        fallbackUrl: '',\r\n      }))\r\n\r\n  });\r\n\r\n    self.onerror = function(message) {\r\n      console.log(message);\r\n    };\r\n  }\r\n\r\n\r\n\r\n  const addResourcesToCache = async (resources) => {\r\n    const cache = await caches.open(\"videoprecache\");\r\n    await cache.addAll(resources);\r\n  };\r\n  \r\n  self.addEventListener('install', (event) => {\r\n   \r\n\r\n    event.waitUntil(\r\n     \r\n      addResourcesToCache([\r\n        './videos/Webdesign-Sequence-transcode.mp4'\r\n      ])\r\n      \r\n    );\r\n   \r\n  });\r\n\r\n\r\n  \r\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport '../_version.js';\n// Name of the search parameter used to store revision info.\nconst REVISION_SEARCH_PARAM = '__WB_REVISION__';\n/**\n * Converts a manifest entry into a versioned URL suitable for precaching.\n *\n * @param {Object|string} entry\n * @return {string} A URL with versioning info.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function createCacheKey(entry) {\n    if (!entry) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If a precache manifest entry is a string, it's assumed to be a versioned\n    // URL, like '/app.abcd1234.js'. Return as-is.\n    if (typeof entry === 'string') {\n        const urlObject = new URL(entry, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    const { revision, url } = entry;\n    if (!url) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If there's just a URL and no revision, then it's also assumed to be a\n    // versioned URL.\n    if (!revision) {\n        const urlObject = new URL(url, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    // Otherwise, construct a properly versioned URL using the custom Workbox\n    // search parameter along with the revision info.\n    const cacheKeyURL = new URL(url, location.href);\n    const originalURL = new URL(url, location.href);\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\n    return {\n        cacheKey: cacheKeyURL.href,\n        url: originalURL.href,\n    };\n}\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to determine the\n * of assets that were updated (or not updated) during the install event.\n *\n * @private\n */\nclass PrecacheInstallReportPlugin {\n    constructor() {\n        this.updatedURLs = [];\n        this.notUpdatedURLs = [];\n        this.handlerWillStart = async ({ request, state, }) => {\n            // TODO: `state` should never be undefined...\n            if (state) {\n                state.originalRequest = request;\n            }\n        };\n        this.cachedResponseWillBeUsed = async ({ event, state, cachedResponse, }) => {\n            if (event.type === 'install') {\n                if (state &&\n                    state.originalRequest &&\n                    state.originalRequest instanceof Request) {\n                    // TODO: `state` should never be undefined...\n                    const url = state.originalRequest.url;\n                    if (cachedResponse) {\n                        this.notUpdatedURLs.push(url);\n                    }\n                    else {\n                        this.updatedURLs.push(url);\n                    }\n                }\n            }\n            return cachedResponse;\n        };\n    }\n}\nexport { PrecacheInstallReportPlugin };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to translate URLs into\n * the corresponding cache key, based on the current revision info.\n *\n * @private\n */\nclass PrecacheCacheKeyPlugin {\n    constructor({ precacheController }) {\n        this.cacheKeyWillBeUsed = async ({ request, params, }) => {\n            // Params is type any, can't change right now.\n            /* eslint-disable */\n            const cacheKey = (params === null || params === void 0 ? void 0 : params.cacheKey) ||\n                this._precacheController.getCacheKeyForURL(request.url);\n            /* eslint-enable */\n            return cacheKey\n                ? new Request(cacheKey, { headers: request.headers })\n                : request;\n        };\n        this._precacheController = precacheController;\n    }\n}\nexport { PrecacheCacheKeyPlugin };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { copyResponse } from 'workbox-core/copyResponse.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from 'workbox-strategies/Strategy.js';\nimport './_version.js';\n/**\n * A {@link workbox-strategies.Strategy} implementation\n * specifically designed to work with\n * {@link workbox-precaching.PrecacheController}\n * to both cache and fetch precached assets.\n *\n * Note: an instance of this class is created automatically when creating a\n * `PrecacheController`; it's generally not necessary to create this yourself.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-precaching\n */\nclass PrecacheStrategy extends Strategy {\n    /**\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] {@link https://developers.google.com/web/tools/workbox/guides/using-plugins|Plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters|init}\n     * of all fetch() requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * {@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions|CacheQueryOptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor(options = {}) {\n        options.cacheName = cacheNames.getPrecacheName(options.cacheName);\n        super(options);\n        this._fallbackToNetwork =\n            options.fallbackToNetwork === false ? false : true;\n        // Redirected responses cannot be used to satisfy a navigation request, so\n        // any redirected response must be \"copied\" rather than cloned, so the new\n        // response doesn't contain the `redirected` flag. See:\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\n        this.plugins.push(PrecacheStrategy.copyRedirectedCacheableResponsesPlugin);\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const response = await handler.cacheMatch(request);\n        if (response) {\n            return response;\n        }\n        // If this is an `install` event for an entry that isn't already cached,\n        // then populate the cache.\n        if (handler.event && handler.event.type === 'install') {\n            return await this._handleInstall(request, handler);\n        }\n        // Getting here means something went wrong. An entry that should have been\n        // precached wasn't found in the cache.\n        return await this._handleFetch(request, handler);\n    }\n    async _handleFetch(request, handler) {\n        let response;\n        const params = (handler.params || {});\n        // Fall back to the network if we're configured to do so.\n        if (this._fallbackToNetwork) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.warn(`The precached response for ` +\n                    `${getFriendlyURL(request.url)} in ${this.cacheName} was not ` +\n                    `found. Falling back to the network.`);\n            }\n            const integrityInManifest = params.integrity;\n            const integrityInRequest = request.integrity;\n            const noIntegrityConflict = !integrityInRequest || integrityInRequest === integrityInManifest;\n            // Do not add integrity if the original request is no-cors\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            response = await handler.fetch(new Request(request, {\n                integrity: request.mode !== 'no-cors'\n                    ? integrityInRequest || integrityInManifest\n                    : undefined,\n            }));\n            // It's only \"safe\" to repair the cache if we're using SRI to guarantee\n            // that the response matches the precache manifest's expectations,\n            // and there's either a) no integrity property in the incoming request\n            // or b) there is an integrity, and it matches the precache manifest.\n            // See https://github.com/GoogleChrome/workbox/issues/2858\n            // Also if the original request users no-cors we don't use integrity.\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            if (integrityInManifest &&\n                noIntegrityConflict &&\n                request.mode !== 'no-cors') {\n                this._useDefaultCacheabilityPluginIfNeeded();\n                const wasCached = await handler.cachePut(request, response.clone());\n                if (process.env.NODE_ENV !== 'production') {\n                    if (wasCached) {\n                        logger.log(`A response for ${getFriendlyURL(request.url)} ` +\n                            `was used to \"repair\" the precache.`);\n                    }\n                }\n            }\n        }\n        else {\n            // This shouldn't normally happen, but there are edge cases:\n            // https://github.com/GoogleChrome/workbox/issues/1441\n            throw new WorkboxError('missing-precache-entry', {\n                cacheName: this.cacheName,\n                url: request.url,\n            });\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            const cacheKey = params.cacheKey || (await handler.getCacheKey(request, 'read'));\n            // Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Precaching is responding to: ` + getFriendlyURL(request.url));\n            logger.log(`Serving the precached url: ${getFriendlyURL(cacheKey instanceof Request ? cacheKey.url : cacheKey)}`);\n            logger.groupCollapsed(`View request details here.`);\n            logger.log(request);\n            logger.groupEnd();\n            logger.groupCollapsed(`View response details here.`);\n            logger.log(response);\n            logger.groupEnd();\n            logger.groupEnd();\n        }\n        return response;\n    }\n    async _handleInstall(request, handler) {\n        this._useDefaultCacheabilityPluginIfNeeded();\n        const response = await handler.fetch(request);\n        // Make sure we defer cachePut() until after we know the response\n        // should be cached; see https://github.com/GoogleChrome/workbox/issues/2737\n        const wasCached = await handler.cachePut(request, response.clone());\n        if (!wasCached) {\n            // Throwing here will lead to the `install` handler failing, which\n            // we want to do if *any* of the responses aren't safe to cache.\n            throw new WorkboxError('bad-precaching-response', {\n                url: request.url,\n                status: response.status,\n            });\n        }\n        return response;\n    }\n    /**\n     * This method is complex, as there a number of things to account for:\n     *\n     * The `plugins` array can be set at construction, and/or it might be added to\n     * to at any time before the strategy is used.\n     *\n     * At the time the strategy is used (i.e. during an `install` event), there\n     * needs to be at least one plugin that implements `cacheWillUpdate` in the\n     * array, other than `copyRedirectedCacheableResponsesPlugin`.\n     *\n     * - If this method is called and there are no suitable `cacheWillUpdate`\n     * plugins, we need to add `defaultPrecacheCacheabilityPlugin`.\n     *\n     * - If this method is called and there is exactly one `cacheWillUpdate`, then\n     * we don't have to do anything (this might be a previously added\n     * `defaultPrecacheCacheabilityPlugin`, or it might be a custom plugin).\n     *\n     * - If this method is called and there is more than one `cacheWillUpdate`,\n     * then we need to check if one is `defaultPrecacheCacheabilityPlugin`. If so,\n     * we need to remove it. (This situation is unlikely, but it could happen if\n     * the strategy is used multiple times, the first without a `cacheWillUpdate`,\n     * and then later on after manually adding a custom `cacheWillUpdate`.)\n     *\n     * See https://github.com/GoogleChrome/workbox/issues/2737 for more context.\n     *\n     * @private\n     */\n    _useDefaultCacheabilityPluginIfNeeded() {\n        let defaultPluginIndex = null;\n        let cacheWillUpdatePluginCount = 0;\n        for (const [index, plugin] of this.plugins.entries()) {\n            // Ignore the copy redirected plugin when determining what to do.\n            if (plugin === PrecacheStrategy.copyRedirectedCacheableResponsesPlugin) {\n                continue;\n            }\n            // Save the default plugin's index, in case it needs to be removed.\n            if (plugin === PrecacheStrategy.defaultPrecacheCacheabilityPlugin) {\n                defaultPluginIndex = index;\n            }\n            if (plugin.cacheWillUpdate) {\n                cacheWillUpdatePluginCount++;\n            }\n        }\n        if (cacheWillUpdatePluginCount === 0) {\n            this.plugins.push(PrecacheStrategy.defaultPrecacheCacheabilityPlugin);\n        }\n        else if (cacheWillUpdatePluginCount > 1 && defaultPluginIndex !== null) {\n            // Only remove the default plugin; multiple custom plugins are allowed.\n            this.plugins.splice(defaultPluginIndex, 1);\n        }\n        // Nothing needs to be done if cacheWillUpdatePluginCount is 1\n    }\n}\nPrecacheStrategy.defaultPrecacheCacheabilityPlugin = {\n    async cacheWillUpdate({ response }) {\n        if (!response || response.status >= 400) {\n            return null;\n        }\n        return response;\n    },\n};\nPrecacheStrategy.copyRedirectedCacheableResponsesPlugin = {\n    async cacheWillUpdate({ response }) {\n        return response.redirected ? await copyResponse(response) : response;\n    },\n};\nexport { PrecacheStrategy };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { waitUntil } from 'workbox-core/_private/waitUntil.js';\nimport { createCacheKey } from './utils/createCacheKey.js';\nimport { PrecacheInstallReportPlugin } from './utils/PrecacheInstallReportPlugin.js';\nimport { PrecacheCacheKeyPlugin } from './utils/PrecacheCacheKeyPlugin.js';\nimport { printCleanupDetails } from './utils/printCleanupDetails.js';\nimport { printInstallDetails } from './utils/printInstallDetails.js';\nimport { PrecacheStrategy } from './PrecacheStrategy.js';\nimport './_version.js';\n/**\n * Performs efficient precaching of assets.\n *\n * @memberof workbox-precaching\n */\nclass PrecacheController {\n    /**\n     * Create a new PrecacheController.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] The cache to use for precaching.\n     * @param {string} [options.plugins] Plugins to use when precaching as well\n     * as responding to fetch events for precached assets.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor({ cacheName, plugins = [], fallbackToNetwork = true, } = {}) {\n        this._urlsToCacheKeys = new Map();\n        this._urlsToCacheModes = new Map();\n        this._cacheKeysToIntegrities = new Map();\n        this._strategy = new PrecacheStrategy({\n            cacheName: cacheNames.getPrecacheName(cacheName),\n            plugins: [\n                ...plugins,\n                new PrecacheCacheKeyPlugin({ precacheController: this }),\n            ],\n            fallbackToNetwork,\n        });\n        // Bind the install and activate methods to the instance.\n        this.install = this.install.bind(this);\n        this.activate = this.activate.bind(this);\n    }\n    /**\n     * @type {workbox-precaching.PrecacheStrategy} The strategy created by this controller and\n     * used to cache assets and respond to fetch events.\n     */\n    get strategy() {\n        return this._strategy;\n    }\n    /**\n     * Adds items to the precache list, removing any duplicates and\n     * stores the files in the\n     * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n     * worker installs.\n     *\n     * This method can be called multiple times.\n     *\n     * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n     */\n    precache(entries) {\n        this.addToCacheList(entries);\n        if (!this._installAndActiveListenersAdded) {\n            self.addEventListener('install', this.install);\n            self.addEventListener('activate', this.activate);\n            this._installAndActiveListenersAdded = true;\n        }\n    }\n    /**\n     * This method will add items to the precache list, removing duplicates\n     * and ensuring the information is valid.\n     *\n     * @param {Array<workbox-precaching.PrecacheController.PrecacheEntry|string>} entries\n     *     Array of entries to precache.\n     */\n    addToCacheList(entries) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArray(entries, {\n                moduleName: 'workbox-precaching',\n                className: 'PrecacheController',\n                funcName: 'addToCacheList',\n                paramName: 'entries',\n            });\n        }\n        const urlsToWarnAbout = [];\n        for (const entry of entries) {\n            // See https://github.com/GoogleChrome/workbox/issues/2259\n            if (typeof entry === 'string') {\n                urlsToWarnAbout.push(entry);\n            }\n            else if (entry && entry.revision === undefined) {\n                urlsToWarnAbout.push(entry.url);\n            }\n            const { cacheKey, url } = createCacheKey(entry);\n            const cacheMode = typeof entry !== 'string' && entry.revision ? 'reload' : 'default';\n            if (this._urlsToCacheKeys.has(url) &&\n                this._urlsToCacheKeys.get(url) !== cacheKey) {\n                throw new WorkboxError('add-to-cache-list-conflicting-entries', {\n                    firstEntry: this._urlsToCacheKeys.get(url),\n                    secondEntry: cacheKey,\n                });\n            }\n            if (typeof entry !== 'string' && entry.integrity) {\n                if (this._cacheKeysToIntegrities.has(cacheKey) &&\n                    this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\n                    throw new WorkboxError('add-to-cache-list-conflicting-integrities', {\n                        url,\n                    });\n                }\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\n            }\n            this._urlsToCacheKeys.set(url, cacheKey);\n            this._urlsToCacheModes.set(url, cacheMode);\n            if (urlsToWarnAbout.length > 0) {\n                const warningMessage = `Workbox is precaching URLs without revision ` +\n                    `info: ${urlsToWarnAbout.join(', ')}\\nThis is generally NOT safe. ` +\n                    `Learn more at https://bit.ly/wb-precache`;\n                if (process.env.NODE_ENV === 'production') {\n                    // Use console directly to display this warning without bloating\n                    // bundle sizes by pulling in all of the logger codebase in prod.\n                    console.warn(warningMessage);\n                }\n                else {\n                    logger.warn(warningMessage);\n                }\n            }\n        }\n    }\n    /**\n     * Precaches new and updated assets. Call this method from the service worker\n     * install event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.InstallResult>}\n     */\n    install(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const installReportPlugin = new PrecacheInstallReportPlugin();\n            this.strategy.plugins.push(installReportPlugin);\n            // Cache entries one at a time.\n            // See https://github.com/GoogleChrome/workbox/issues/2528\n            for (const [url, cacheKey] of this._urlsToCacheKeys) {\n                const integrity = this._cacheKeysToIntegrities.get(cacheKey);\n                const cacheMode = this._urlsToCacheModes.get(url);\n                const request = new Request(url, {\n                    integrity,\n                    cache: cacheMode,\n                    credentials: 'same-origin',\n                });\n                await Promise.all(this.strategy.handleAll({\n                    params: { cacheKey },\n                    request,\n                    event,\n                }));\n            }\n            const { updatedURLs, notUpdatedURLs } = installReportPlugin;\n            if (process.env.NODE_ENV !== 'production') {\n                printInstallDetails(updatedURLs, notUpdatedURLs);\n            }\n            return { updatedURLs, notUpdatedURLs };\n        });\n    }\n    /**\n     * Deletes assets that are no longer present in the current precache manifest.\n     * Call this method from the service worker activate event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.CleanupResult>}\n     */\n    activate(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            const currentlyCachedRequests = await cache.keys();\n            const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\n            const deletedURLs = [];\n            for (const request of currentlyCachedRequests) {\n                if (!expectedCacheKeys.has(request.url)) {\n                    await cache.delete(request);\n                    deletedURLs.push(request.url);\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                printCleanupDetails(deletedURLs);\n            }\n            return { deletedURLs };\n        });\n    }\n    /**\n     * Returns a mapping of a precached URL to the corresponding cache key, taking\n     * into account the revision information for the URL.\n     *\n     * @return {Map<string, string>} A URL to cache key mapping.\n     */\n    getURLsToCacheKeys() {\n        return this._urlsToCacheKeys;\n    }\n    /**\n     * Returns a list of all the URLs that have been precached by the current\n     * service worker.\n     *\n     * @return {Array<string>} The precached URLs.\n     */\n    getCachedURLs() {\n        return [...this._urlsToCacheKeys.keys()];\n    }\n    /**\n     * Returns the cache key used for storing a given URL. If that URL is\n     * unversioned, like `/index.html', then the cache key will be the original\n     * URL with a search parameter appended to it.\n     *\n     * @param {string} url A URL whose cache key you want to look up.\n     * @return {string} The versioned URL that corresponds to a cache key\n     * for the original URL, or undefined if that URL isn't precached.\n     */\n    getCacheKeyForURL(url) {\n        const urlObject = new URL(url, location.href);\n        return this._urlsToCacheKeys.get(urlObject.href);\n    }\n    /**\n     * @param {string} url A cache key whose SRI you want to look up.\n     * @return {string} The subresource integrity associated with the cache key,\n     * or undefined if it's not set.\n     */\n    getIntegrityForCacheKey(cacheKey) {\n        return this._cacheKeysToIntegrities.get(cacheKey);\n    }\n    /**\n     * This acts as a drop-in replacement for\n     * [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\n     * with the following differences:\n     *\n     * - It knows what the name of the precache is, and only checks in that cache.\n     * - It allows you to pass in an \"original\" URL without versioning parameters,\n     * and it will automatically look up the correct cache key for the currently\n     * active revision of that URL.\n     *\n     * E.g., `matchPrecache('index.html')` will find the correct precached\n     * response for the currently active service worker, even if the actual cache\n     * key is `'/index.html?__WB_REVISION__=1234abcd'`.\n     *\n     * @param {string|Request} request The key (without revisioning parameters)\n     * to look up in the precache.\n     * @return {Promise<Response|undefined>}\n     */\n    async matchPrecache(request) {\n        const url = request instanceof Request ? request.url : request;\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (cacheKey) {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            return cache.match(cacheKey);\n        }\n        return undefined;\n    }\n    /**\n     * Returns a function that looks up `url` in the precache (taking into\n     * account revision information), and returns the corresponding `Response`.\n     *\n     * @param {string} url The precached URL which will be used to lookup the\n     * `Response`.\n     * @return {workbox-routing~handlerCallback}\n     */\n    createHandlerBoundToURL(url) {\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (!cacheKey) {\n            throw new WorkboxError('non-precached-url', { url });\n        }\n        return (options) => {\n            options.request = new Request(url);\n            options.params = Object.assign({ cacheKey }, options.params);\n            return this.strategy.handle(options);\n        };\n    }\n}\nexport { PrecacheController };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { PrecacheController } from '../PrecacheController.js';\nimport '../_version.js';\nlet precacheController;\n/**\n * @return {PrecacheController}\n * @private\n */\nexport const getOrCreatePrecacheController = () => {\n    if (!precacheController) {\n        precacheController = new PrecacheController();\n    }\n    return precacheController;\n};\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { Route } from 'workbox-routing/Route.js';\nimport { generateURLVariations } from './utils/generateURLVariations.js';\nimport './_version.js';\n/**\n * A subclass of {@link workbox-routing.Route} that takes a\n * {@link workbox-precaching.PrecacheController}\n * instance and uses it to match incoming requests and handle fetching\n * responses from the precache.\n *\n * @memberof workbox-precaching\n * @extends workbox-routing.Route\n */\nclass PrecacheRoute extends Route {\n    /**\n     * @param {PrecacheController} precacheController A `PrecacheController`\n     * instance used to both match requests and respond to fetch events.\n     * @param {Object} [options] Options to control how requests are matched\n     * against the list of precached URLs.\n     * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n     * check cache entries for a URLs ending with '/' to see if there is a hit when\n     * appending the `directoryIndex` value.\n     * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/, /^fbclid$/]] An\n     * array of regex's to remove search params when looking for a cache match.\n     * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n     * check the cache for the URL with a `.html` added to the end of the end.\n     * @param {workbox-precaching~urlManipulation} [options.urlManipulation]\n     * This is a function that should take a URL and return an array of\n     * alternative URLs that should be checked for precache matches.\n     */\n    constructor(precacheController, options) {\n        const match = ({ request, }) => {\n            const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\n            for (const possibleURL of generateURLVariations(request.url, options)) {\n                const cacheKey = urlsToCacheKeys.get(possibleURL);\n                if (cacheKey) {\n                    const integrity = precacheController.getIntegrityForCacheKey(cacheKey);\n                    return { cacheKey, integrity };\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Precaching did not find a match for ` + getFriendlyURL(request.url));\n            }\n            return;\n        };\n        super(match, precacheController.strategy);\n    }\n}\nexport { PrecacheRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function* generateURLVariations(url, { ignoreURLParametersMatching = [/^utm_/, /^fbclid$/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = '';\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\n        directoryURL.pathname += directoryIndex;\n        yield directoryURL.href;\n    }\n    if (cleanURLs) {\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\n        cleanURL.pathname += '.html';\n        yield cleanURL.href;\n    }\n    if (urlManipulation) {\n        const additionalURLs = urlManipulation({ url: urlObject });\n        for (const urlToAttempt of additionalURLs) {\n            yield urlToAttempt.href;\n        }\n    }\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Removes any URL search parameters that should be ignored.\n *\n * @param {URL} urlObject The original URL.\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\n * each search parameter name. Matches mean that the search parameter should be\n * ignored.\n * @return {URL} The URL with any ignored search parameters removed.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching = []) {\n    // Convert the iterable into an array at the start of the loop to make sure\n    // deletion doesn't mess up iteration.\n    for (const paramName of [...urlObject.searchParams.keys()]) {\n        if (ignoreURLParametersMatching.some((regExp) => regExp.test(paramName))) {\n            urlObject.searchParams.delete(paramName);\n        }\n    }\n    return urlObject;\n}\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { addRoute } from './addRoute.js';\nimport { precache } from './precache.js';\nimport './_version.js';\n/**\n * This method will add entries to the precache list and add a route to\n * respond to fetch events.\n *\n * This is a convenience method that will call\n * {@link workbox-precaching.precache} and\n * {@link workbox-precaching.addRoute} in a single call.\n *\n * @param {Array<Object|string>} entries Array of entries to precache.\n * @param {Object} [options] See the\n * {@link workbox-precaching.PrecacheRoute} options.\n *\n * @memberof workbox-precaching\n */\nfunction precacheAndRoute(entries, options) {\n    precache(entries);\n    addRoute(options);\n}\nexport { precacheAndRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Adds items to the precache list, removing any duplicates and\n * stores the files in the\n * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n * worker installs.\n *\n * This method can be called multiple times.\n *\n * Please note: This method **will not** serve any of the cached files for you.\n * It only precaches files. To respond to a network request you call\n * {@link workbox-precaching.addRoute}.\n *\n * If you have a single array of files to precache, you can just call\n * {@link workbox-precaching.precacheAndRoute}.\n *\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n *\n * @memberof workbox-precaching\n */\nfunction precache(entries) {\n    const precacheController = getOrCreatePrecacheController();\n    precacheController.precache(entries);\n}\nexport { precache };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { registerRoute } from 'workbox-routing/registerRoute.js';\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport { PrecacheRoute } from './PrecacheRoute.js';\nimport './_version.js';\n/**\n * Add a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * @param {Object} [options] See the {@link workbox-precaching.PrecacheRoute}\n * options.\n *\n * @memberof workbox-precaching\n */\nfunction addRoute(options) {\n    const precacheController = getOrCreatePrecacheController();\n    const precacheRoute = new PrecacheRoute(precacheController, options);\n    registerRoute(precacheRoute);\n}\nexport { addRoute };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(138);\n"],"names":["webpackQueues","webpackExports","webpackError","resolveQueue","self","_","e","Deferred","constructor","this","promise","Promise","resolve","reject","WorkboxError","Error","errorCode","details","super","code","args","msg","length","JSON","stringify","messageGenerator","name","stripParams","fullURL","ignoreParams","strippedURL","URL","param","searchParams","delete","href","async","cacheMatchIgnoreParams","cache","request","matchOptions","strippedRequestURL","url","match","keysOptions","Object","assign","ignoreSearch","cacheKeys","keys","cacheKey","_cacheNameDetails","googleAnalytics","precache","prefix","runtime","suffix","registration","scope","_createCacheName","cacheName","filter","value","join","cacheNames","updateDetails","fn","key","eachCacheNameDetail","getGoogleAnalyticsName","userCacheName","getPrecacheName","getPrefix","getRuntimeName","getSuffix","supportStatus","canConstructResponseFromBodyStream","undefined","testResponse","Response","body","error","executeQuotaErrorCallbacks","callback","getFriendlyURL","String","location","replace","RegExp","origin","logger","timeout","ms","setTimeout","waitUntil","event","asyncFn","returnPromise","copyResponse","response","modifier","clonedResponse","clone","responseInit","headers","Headers","status","statusText","modifiedResponseInit","blob","quotaErrorCallbacks","Set","RegExpRoute","regExp","handler","method","result","exec","index","slice","Route","setCatchHandler","catchHandler","Router","_routes","Map","_defaultHandlerMap","routes","addFetchListener","addEventListener","responsePromise","handleRequest","respondWith","addCacheListener","data","type","payload","requestPromises","all","urlsToCache","map","entry","Request","ports","then","postMessage","protocol","startsWith","sameOrigin","params","route","findMatchingRoute","has","get","handle","err","_catchHandler","catch","catchErr","matchResult","Array","isArray","setDefaultHandler","set","registerRoute","push","unregisterRoute","routeIndex","indexOf","splice","capture","captureUrl","matchCallback","moduleName","funcName","paramName","defaultMethod","defaultRouter","getOrCreateDefaultRouter","normalizeHandler","Strategy","options","plugins","fetchOptions","responseDone","handleAll","FetchEvent","_getResponse","_awaitComplete","runCallbacks","_handle","iterateCallbacks","doneWaiting","waitUntilError","destroy","toRequest","input","StrategyHandler","strategy","_cacheKeys","_strategy","_handlerDeferred","_extendLifetimePromises","_plugins","_pluginStateMap","plugin","fetch","mode","preloadResponse","possiblePreloadResponse","originalRequest","hasCallback","cb","thrownErrorMessage","message","pluginFilteredRequest","fetchResponse","fetchAndCachePut","responseClone","cachePut","cacheMatch","cachedResponse","effectiveRequest","getCacheKey","multiMatchOptions","caches","responseToCache","_ensureResponseSafeToCache","open","hasCacheUpdateCallback","oldResponse","put","newResponse","state","statefulCallback","statefulParam","shift","pluginsUsed","n","t","r","MessageChannel","port1","onmessage","port2","Symbol","iterator","prototype","toString","call","from","test","i","done","TypeError","next","bind","o","u","a","c","f","s","v","nn","tn","rn","en","on","un","an","cn","installing","scriptURL","sn","performance","now","vn","removeEventListener","hn","add","ln","target","sw","isExternal","originalEvent","mn","isUpdate","dispatchEvent","wn","waiting","clearTimeout","dn","navigator","serviceWorker","controller","gn","source","getSW","arguments","apply","create","__proto__","l","w","register","immediate","document","readyState","window","Boolean","yn","pn","bn","once","wasWaitingBeforeRegister","update","messageSW","messageSkipWaiting","enumerable","configurable","writable","defineProperty","Pn","Sn","console","log","putInCache","enableNavigationPreload","navigationPreload","enable","cacheFirst","preloadResponsePromise","fallbackUrl","responseFromCache","info","responseFromNetwork","ArrayWithoutImages","__WB_MANIFEST","endsWith","onerror","addResourcesToCache","resources","addAll","instanceOfAny","object","constructors","some","idbProxyableTypes","cursorAdvanceMethods","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","prop","receiver","IDBTransaction","objectStoreNames","objectStore","transformCachableValue","func","IDBDatabase","transaction","IDBCursor","advance","continue","continuePrimaryKey","includes","unwrap","storeNames","tx","sort","unlisten","complete","DOMException","cacheDonePromiseForTransaction","IDBObjectStore","IDBIndex","Proxy","IDBRequest","success","promisifyRequest","newValue","readMethods","writeMethods","cachedMethods","getMethod","targetFuncName","useIndex","isWrite","storeName","store","oldTraps","createCacheKey","urlObject","revision","cacheKeyURL","originalURL","PrecacheInstallReportPlugin","updatedURLs","notUpdatedURLs","handlerWillStart","cachedResponseWillBeUsed","PrecacheCacheKeyPlugin","precacheController","cacheKeyWillBeUsed","_precacheController","getCacheKeyForURL","PrecacheStrategy","_fallbackToNetwork","fallbackToNetwork","copyRedirectedCacheableResponsesPlugin","_handleInstall","_handleFetch","integrityInManifest","integrity","integrityInRequest","noIntegrityConflict","_useDefaultCacheabilityPluginIfNeeded","defaultPluginIndex","cacheWillUpdatePluginCount","entries","defaultPrecacheCacheabilityPlugin","cacheWillUpdate","redirected","PrecacheController","_urlsToCacheKeys","_urlsToCacheModes","_cacheKeysToIntegrities","install","activate","addToCacheList","_installAndActiveListenersAdded","urlsToWarnAbout","cacheMode","firstEntry","secondEntry","warningMessage","warn","installReportPlugin","credentials","currentlyCachedRequests","expectedCacheKeys","values","deletedURLs","getURLsToCacheKeys","getCachedURLs","getIntegrityForCacheKey","matchPrecache","createHandlerBoundToURL","PrecacheRoute","urlsToCacheKeys","possibleURL","ignoreURLParametersMatching","directoryIndex","cleanURLs","urlManipulation","hash","urlWithoutIgnoredParams","removeIgnoredSearchParams","pathname","directoryURL","cleanURL","additionalURLs","urlToAttempt","generateURLVariations","precacheAndRoute","precacheRoute","addRoute","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","queue","d","forEach","hasAwait","currentDeps","outerResolve","depQueues","rej","x","deps","dep","obj","ret","wrapDeps","getResult","fnQueue","q","getter","__esModule","definition","hasOwnProperty"],"sourceRoot":""}